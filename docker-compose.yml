services:
  # PostgreSQL 数据库
  database:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ew_logistics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ew-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (缓存和会话存储)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - ew-network
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # 后端 API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ew_logistics
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5001:5000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - ew-network
    volumes:
      - ./backend:/app
      - /app/node_modules

  # 前端 React 应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - ew-network
    environment:
      REACT_APP_API_URL: http://localhost:5001/api

  # Nginx 反向代理 (生产环境)
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - ew-network
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    profiles:
      - production

networks:
  ew-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: 